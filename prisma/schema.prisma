// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  role      String   @default("USER") // USER, ADMIN, COLLECTOR
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  wasteReports     WasteReport[]
  collectionRequests CollectionRequest[]
  collectionEntries CollectionEntry[]
  voiceLogs        VoiceLog[]
  sessions         Session[]

  @@map("users")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model WasteReport {
  id          String   @id @default(cuid())
  type        String   // PLASTIC, PAPER, GLASS, METAL, ORGANIC, ELECTRONIC, OTHER
  quantity    Int
  latitude    Float
  longitude   Float
  address     String?
  description String?
  priority    String   @default("MEDIUM") // LOW, MEDIUM, HIGH, URGENT
  status      String   @default("PENDING") // PENDING, IN_PROGRESS, COMPLETED, CANCELLED
  imageUrl    String?
  reportedBy  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user               User                @relation(fields: [reportedBy], references: [id])
  collectionRequests CollectionRequest[]
  aiAnalysis         AIAnalysis[]

  @@map("waste_reports")
}

model CollectionRequest {
  id            String   @id @default(cuid())
  wasteReportId String
  scheduledDate DateTime
  notes         String?
  status        String   @default("PENDING") // PENDING, APPROVED, IN_PROGRESS, COMPLETED, CANCELLED
  requestedBy   String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  wasteReport WasteReport @relation(fields: [wasteReportId], references: [id])
  user        User        @relation(fields: [requestedBy], references: [id])

  @@map("collection_requests")
}

model AIAnalysis {
  id           String   @id @default(cuid())
  wasteReportId String
  modelUsed    String
  confidence   Float
  wasteType    String
  analysisData String   // JSON as string for SQLite
  createdAt    DateTime @default(now())

  // Relations
  wasteReport WasteReport @relation(fields: [wasteReportId], references: [id])

  @@map("ai_analyses")
}

model CollectionEntry {
  id                  String   @id @default(cuid())
  houseId             String   // House identifier
  wasteTypes          String   // JSON array of waste types
  wasteWeight         Float    @default(0) // Weight in kgs
  imageUrl            String?  // Path to uploaded image
  segregationViolation Boolean  @default(false)
  timestamp           DateTime @default(now())
  latitude            Float?
  longitude           Float?
  locationCaptured    Boolean  @default(false)
  remarks             String?  // Optional remarks from collector
  collectedBy         String   // User ID of the collector
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Relations
  user User @relation(fields: [collectedBy], references: [id])

  @@map("collection_entries")
}

model VoiceLog {
  id            String   @id @default(cuid())
  houseId       String?
  recordedLang  String
  nativeText    String
  translatedText String?
  remarks       String?
  audioUrl      String?
  userRole      String
  userName      String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  createdBy     String
  user          User     @relation(fields: [createdBy], references: [id], onDelete: Cascade)

  @@map("voice_logs")
} 